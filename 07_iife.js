//Immediate Invoked Function Expression
let result = []
// for (var i = 0; i < 5; i++){
//     result.push(function(){
//         console.log(i)
//     })
// }
// result[2]()
// result[4]()

for (var i = 0; i < 5; i++) {
    (function (j) {
        result.push(function () {
            console.log(j)
        })
    })(i)
}

result[2]()
result[4]()

// ================ Function Expression ====================
// Функция в JavaScript – это не магическая языковая структура, а особого типа значение.Синтаксис, который мы использовали до этого, называется Function Declaration (Объявление Функции):

// function sayHi() {
//     alert("Привет");
// }

// Существует ещё один синтаксис создания функций, который называется Function Expression
// (Функциональное Выражение).

// Оно выглядит вот так:

let sayHi = function () {
    console.log("Привет");
};
// В коде выше функция создаётся и явно присваивается переменной, как любое другое значение. По сути без разницы, как мы определили функцию, это просто значение, хранимое в переменной sayHi.

// Смысл обоих примеров кода одинаков: "создать функцию и поместить её значение в переменную sayHi".


// Мы можем даже вывести это значение с помощью console.log():

function sayHey() {
    console.log("Привет");
}

console.log(sayHey); // выведет код функции
// Обратите внимание, что последняя строка не вызывает функцию sayHey, после её имени нет круглых скобок. Существуют языки программирования, в которых любое упоминание имени функции совершает её вызов. JavaScript – не один из них.
//
//  В JavaScript функции – это значения, поэтому мы и обращаемся с ними, как со значениями. Код выше выведет строковое представление функции, которое является её исходным кодом.
//
//  Конечно, функция – не обычное значение, в том смысле, что мы можем вызвать его при помощи скобок: sayHey().

//  Но всё же это значение. Поэтому мы можем делать с ним то же самое, что и с любым другим значением.

// Мы можем скопировать функцию в другую переменную:

function sayHello() {   // (1) создаём
    console.log("Привет");
}

let func = sayHello;    // (2) копируем

func(); // Привет    // (3) вызываем копию (работает)!
sayHello(); // Привет   //   прежняя тоже работает (почему бы нет)
// Давайте подробно разберём всё, что тут произошло:

// Объявление Function Declaration (1) создало функцию и присвоило её значение переменной с именем sayHello.
//     В строке (2) мы скопировали её значение в переменную func. Обратите внимание (ещё раз): нет круглых скобок после sayHello. Если бы они были, то выражение func = sayHi() записало бы результат вызова sayHello() в переменную func, а не саму функцию sayHi.
//     Теперь функция может быть вызвана с помощью обеих переменных sayHello() и func().
//     Заметим, что мы могли бы использовать и Function Expression для того, чтобы создать sayHello в первой строке:

let sayHeey = function () {
    alert("Привет");
};

let func1= sayHeey;
// ...
// Результат был бы таким же.